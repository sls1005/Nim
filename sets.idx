nimTitle	sets	sets.html	module std/sets		0
nim	HashSet	sets.html#HashSet	object HashSet		66
nim	OrderedSet	sets.html#OrderedSet	object OrderedSet		78
nim	SomeSet	sets.html#SomeSet	type SomeSet		85
nim	defaultInitialSize	sets.html#defaultInitialSize	const defaultInitialSize		89
nim	init	sets.html#init,HashSet[A]	proc init[A](s: var HashSet[A]; initialSize = defaultInitialSize)		98
nim	initHashSet	sets.html#initHashSet	proc initHashSet[A](initialSize = defaultInitialSize): HashSet[A]		117
nim	`[]`	sets.html#[],HashSet[A],A	proc `[]`[A](s: var HashSet[A]; key: A): var A		136
nim	contains	sets.html#contains,HashSet[A],A	proc contains[A](s: HashSet[A]; key: A): bool		151
nim	len	sets.html#len,HashSet[A]	proc len[A](s: HashSet[A]): int		172
nim	card	sets.html#card,HashSet[A]	proc card[A](s: HashSet[A]): int		186
nim	incl	sets.html#incl,HashSet[A],A	proc incl[A](s: var HashSet[A]; key: A)		193
nim	incl	sets.html#incl,HashSet[A],HashSet[A]	proc incl[A](s: var HashSet[A]; other: HashSet[A])		210
nim	toHashSet	sets.html#toHashSet,openArray[A]	proc toHashSet[A](keys: openArray[A]): HashSet[A]		228
nim	items	sets.html#items.i,HashSet[A]	iterator items[A](s: HashSet[A]): A		248
nim	containsOrIncl	sets.html#containsOrIncl,HashSet[A],A	proc containsOrIncl[A](s: var HashSet[A]; key: A): bool		274
nim	excl	sets.html#excl,HashSet[A],A	proc excl[A](s: var HashSet[A]; key: A)		294
nim	excl	sets.html#excl,HashSet[A],HashSet[A]	proc excl[A](s: var HashSet[A]; other: HashSet[A])		311
nim	missingOrExcl	sets.html#missingOrExcl,HashSet[A],A	proc missingOrExcl[A](s: var HashSet[A]; key: A): bool		330
nim	pop	sets.html#pop,HashSet[A]	proc pop[A](s: var HashSet[A]): A		350
nim	clear	sets.html#clear,HashSet[A]	proc clear[A](s: var HashSet[A])		369
nim	union	sets.html#union,HashSet[A],HashSet[A]	proc union[A](s1, s2: HashSet[A]): HashSet[A]		388
nim	intersection	sets.html#intersection,HashSet[A],HashSet[A]	proc intersection[A](s1, s2: HashSet[A]): HashSet[A]		410
nim	difference	sets.html#difference,HashSet[A],HashSet[A]	proc difference[A](s1, s2: HashSet[A]): HashSet[A]		441
nim	symmetricDifference	sets.html#symmetricDifference,HashSet[A],HashSet[A]	proc symmetricDifference[A](s1, s2: HashSet[A]): HashSet[A]		465
nim	`+`	sets.html#+,HashSet[A],HashSet[A]	proc `+`[A](s1, s2: HashSet[A]): HashSet[A]		489
nim	`*`	sets.html#*,HashSet[A],HashSet[A]	proc `*`[A](s1, s2: HashSet[A]): HashSet[A]		493
nim	`-`	sets.html#-,HashSet[A],HashSet[A]	proc `-`[A](s1, s2: HashSet[A]): HashSet[A]		497
nim	`-+-`	sets.html#-+-,HashSet[A],HashSet[A]	proc `-+-`[A](s1, s2: HashSet[A]): HashSet[A]		501
nim	disjoint	sets.html#disjoint,HashSet[A],HashSet[A]	proc disjoint[A](s1, s2: HashSet[A]): bool		506
nim	`<`	sets.html#<,HashSet[A],HashSet[A]	proc `<`[A](s, t: HashSet[A]): bool		519
nim	`<=`	sets.html#<=,HashSet[A],HashSet[A]	proc `<=`[A](s, t: HashSet[A]): bool		534
nim	`==`	sets.html#==,HashSet[A],HashSet[A]	proc `==`[A](s, t: HashSet[A]): bool		555
nim	map	sets.html#map,HashSet[A],proc(A)	proc map[A, B](data: HashSet[A]; op: proc (x: A): B {.closure.}): HashSet[B]		565
nim	hash	sets.html#hash,HashSet[A]	proc hash[A](s: HashSet[A]): Hash		579
nim	`$`	sets.html#$,HashSet[A]	proc `$`[A](s: HashSet[A]): string		585
nim	initSet	sets.html#initSet	proc initSet[A](initialSize = defaultInitialSize): HashSet[A]		601
nim	toSet	sets.html#toSet,openArray[A]	proc toSet[A](keys: openArray[A]): HashSet[A]		604
nim	isValid	sets.html#isValid,HashSet[A]	proc isValid[A](s: HashSet[A]): bool		607
nim	init	sets.html#init,OrderedSet[A]	proc init[A](s: var OrderedSet[A]; initialSize = defaultInitialSize)		636
nim	initOrderedSet	sets.html#initOrderedSet	proc initOrderedSet[A](initialSize = defaultInitialSize): OrderedSet[A]		655
nim	toOrderedSet	sets.html#toOrderedSet,openArray[A]	proc toOrderedSet[A](keys: openArray[A]): OrderedSet[A]		674
nim	contains	sets.html#contains,OrderedSet[A],A	proc contains[A](s: OrderedSet[A]; key: A): bool		694
nim	incl	sets.html#incl,OrderedSet[A],A	proc incl[A](s: var OrderedSet[A]; key: A)		715
nim	incl	sets.html#incl,HashSet[A],OrderedSet[A]	proc incl[A](s: var HashSet[A]; other: OrderedSet[A])		732
nim	containsOrIncl	sets.html#containsOrIncl,OrderedSet[A],A	proc containsOrIncl[A](s: var OrderedSet[A]; key: A): bool		748
nim	excl	sets.html#excl,OrderedSet[A],A	proc excl[A](s: var OrderedSet[A]; key: A)		767
nim	missingOrExcl	sets.html#missingOrExcl,OrderedSet[A],A	proc missingOrExcl[A](s: var OrderedSet[A]; key: A): bool		783
nim	clear	sets.html#clear,OrderedSet[A]	proc clear[A](s: var OrderedSet[A])		803
nim	len	sets.html#len,OrderedSet[A]	proc len[A](s: OrderedSet[A]): int		821
nim	card	sets.html#card,OrderedSet[A]	proc card[A](s: OrderedSet[A]): int		835
nim	`==`	sets.html#==,OrderedSet[A],OrderedSet[A]	proc `==`[A](s, t: OrderedSet[A]): bool		842
nim	hash	sets.html#hash,OrderedSet[A]	proc hash[A](s: OrderedSet[A]): Hash		866
nim	`$`	sets.html#$,OrderedSet[A]	proc `$`[A](s: OrderedSet[A]): string		872
nim	items	sets.html#items.i,OrderedSet[A]	iterator items[A](s: OrderedSet[A]): A		890
nim	pairs	sets.html#pairs.i,OrderedSet[A]	iterator pairs[A](s: OrderedSet[A]): tuple[a: int, b: A]		914
idx	hash set	sets.html#hash-set_1	Module sets		0
nimgrp	contains	sets.html#contains-procs-all	proc		151
nimgrp	$	sets.html#$-procs-all	proc		585
nimgrp	containsorincl	sets.html#containsOrIncl-procs-all	proc		274
nimgrp	excl	sets.html#excl-procs-all	proc		294
nimgrp	card	sets.html#card-procs-all	proc		186
nimgrp	len	sets.html#len-procs-all	proc		172
nimgrp	missingorexcl	sets.html#missingOrExcl-procs-all	proc		330
nimgrp	incl	sets.html#incl-procs-all	proc		193
nimgrp	init	sets.html#init-procs-all	proc		98
nimgrp	clear	sets.html#clear-procs-all	proc		369
nimgrp	==	sets.html#==-procs-all	proc		555
nimgrp	hash	sets.html#hash-procs-all	proc		579
nimgrp	items	sets.html#items-iterators-all	iterator		248
